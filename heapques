
#frequencyCount---------




#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int main() {
    vector<int> nums = {1, 2, 2, 3, 1, 1};

    unordered_map<int, int> freq;

    // Count frequency of each number
    for (int num : nums) {
        freq[num]++;
    }

    // Print frequency
    for (auto& pair : freq) {
        cout << "Number " << pair.first << " appears " << pair.second << " times." << endl;
    }

    return 0;
}









//priority_queue C++ Standard Template Library (STL) ka part hai jo heap algorithms use karta hai internally.

//Ye default taur pe max-heap ki tarah behave karta hai (badi value sabse pehle aati










#include <vector>
#include <unordered_map>
#include <queue>
using namespace std;

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }

        // Min-heap using frequency as the key
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        for (auto& [num, count] : freq) {
            pq.push({count, num});
            if (pq.size() > k) {
                pq.pop();  // remove lowest frequency
            }
        }

        // Extract elements from the heap
        vector<int> result;
        while (!pq.empty()) {
            result.push_back(pq.top().second);
            pq.pop();
        }
        return result;
    }
};


            



       











